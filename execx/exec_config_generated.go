// Code generated by "goconfig -field Dir filepathx.DirPath|Env Env -option -output exec_config_generated.go"; DO NOT EDIT.

package execx

import "berquerant/install-via-git-go/filepathx"

type ConfigItem[T any] struct {
	modified     bool
	value        T
	defaultValue T
}

func (s *ConfigItem[T]) Set(value T) {
	s.modified = true
	s.value = value
}
func (s *ConfigItem[T]) Get() T {
	if s.modified {
		return s.value
	}
	return s.defaultValue
}
func (s *ConfigItem[T]) Default() T {
	return s.defaultValue
}
func (s *ConfigItem[T]) IsModified() bool {
	return s.modified
}
func NewConfigItem[T any](defaultValue T) *ConfigItem[T] {
	return &ConfigItem[T]{
		defaultValue: defaultValue,
	}
}

type Config struct {
	Dir *ConfigItem[filepathx.DirPath]
	Env *ConfigItem[Env]
}
type ConfigBuilder struct {
	dir filepathx.DirPath
	env Env
}

func (s *ConfigBuilder) Dir(v filepathx.DirPath) *ConfigBuilder {
	s.dir = v
	return s
}
func (s *ConfigBuilder) Env(v Env) *ConfigBuilder {
	s.env = v
	return s
}
func (s *ConfigBuilder) Build() *Config {
	return &Config{
		Dir: NewConfigItem(s.dir),
		Env: NewConfigItem(s.env),
	}
}

func NewConfigBuilder() *ConfigBuilder { return &ConfigBuilder{} }
func (s *Config) Apply(opt ...ConfigOption) {
	for _, x := range opt {
		x(s)
	}
}

type ConfigOption func(*Config)

func WithDir(v filepathx.DirPath) ConfigOption {
	return func(c *Config) {
		c.Dir.Set(v)
	}
}
func WithEnv(v Env) ConfigOption {
	return func(c *Config) {
		c.Env.Set(v)
	}
}
